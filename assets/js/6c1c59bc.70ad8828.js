"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[229],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),u=a,y=d["".concat(s,".").concat(u)]||d[u]||m[u]||o;return n?r.createElement(y,i(i({ref:t},c),{},{components:n})):r.createElement(y,i({ref:t},c))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6475:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:2},i="NpmLayerVersion",l={unversionedId:"deployment/layers",id:"deployment/layers",title:"NpmLayerVersion",description:"Apimda has a NpmLayerVersion construct to create a custom lambda layer from an NPM package.json file. This is useful for packaging your project's dependencies into a layer to speed up deployment and lower cold start times.",source:"@site/docs/deployment/layers.md",sourceDirName:"deployment",slug:"/deployment/layers",permalink:"/docs/deployment/layers",draft:!1,editUrl:"https://github.com/joemays/apimda/tree/main/docs/docs/deployment/layers.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"ApimdaApp",permalink:"/docs/deployment/construct"},next:{title:"Open API",permalink:"/docs/openapi"}},s={},p=[{value:"Directory Structure",id:"directory-structure",level:2},{value:"Creating NpmLayerVersion",id:"creating-npmlayerversion",level:2},{value:"Using NpmLayerVersion",id:"using-npmlayerversion",level:2}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"npmlayerversion"},"NpmLayerVersion"),(0,a.kt)("p",null,"Apimda has a ",(0,a.kt)("inlineCode",{parentName:"p"},"NpmLayerVersion")," construct to create a custom ",(0,a.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html"},"lambda layer")," from an NPM package.json file. This is useful for packaging your project's dependencies into a layer to speed up deployment and lower cold start times."),(0,a.kt)("p",null,"Simply list the packages you'd like to be included in ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json"),", and apimda will make sure they're up-to-date (i.e. ",(0,a.kt)("inlineCode",{parentName:"p"},"npm install"),") before every deployment, and then generate the layer itself as a CDK ",(0,a.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_lambda.LayerVersion.html"},"LayerVersion"),"."),(0,a.kt)("h2",{id:"directory-structure"},"Directory Structure"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"NpmLayerVersion")," requires the following directory structure, as specified by ",(0,a.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html#configuration-layers-path"},"AWS Lambda layer path configuration")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"<root>\n|- <custom code>\n|- nodejs\n   |- package.json\n   |- package-lock.json\n")),(0,a.kt)("h2",{id:"creating-npmlayerversion"},"Creating NpmLayerVersion"),(0,a.kt)("p",null,"You can create an ",(0,a.kt)("inlineCode",{parentName:"p"},"NpmLayerVersion")," with the following ",(0,a.kt)("inlineCode",{parentName:"p"},"NpmLayerVersionProps"),":"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Path to the directory structure of the layer, relative to your ",(0,a.kt)("inlineCode",{parentName:"li"},"tsconfig.json")),(0,a.kt)("li",{parentName:"ol"},"Custom ",(0,a.kt)("a",{parentName:"li",href:"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_lambda.LayerVersionProps.html"},"LayerVersionProps")," to pass to the underlying CDK ",(0,a.kt)("inlineCode",{parentName:"li"},"LayerVersion")," construct:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const layer = new NpmLayerVersion(this, 'DependencyLayer', {\n  layerPath: 'src/deploy/layer',\n  layerVersionProps: {\n    removalPolicy: UserApiStack.removalPolicy,\n    compatibleArchitectures: [lambda.Architecture.X86_64, lambda.Architecture.ARM_64],\n    compatibleRuntimes: [lambda.Runtime.NODEJS_16_X]\n  }\n});\n")),(0,a.kt)("h2",{id:"using-npmlayerversion"},"Using NpmLayerVersion"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"NpmLayerVersion")," provides two properties to be used when creating ",(0,a.kt)("inlineCode",{parentName:"p"},"NodejsFunction"),"s:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"layerVersion"),": the underlying CDK ",(0,a.kt)("inlineCode",{parentName:"li"},"LayerVersion")," representing the lambda layer itself"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"packagedDependencies"),": list of dependencies that were packaged.")),(0,a.kt)("p",null,"The example below shows how to use this with ",(0,a.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_lambda_nodejs.NodejsFunctionProps.html"},"NodejsFunctionProps")," to create an ",(0,a.kt)("a",{parentName:"p",href:"/docs/deployment/construct"},"ApimdaApp")," construct:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const lambdaProps: NodejsFunctionProps = {\n  architecture: lambda.Architecture.ARM_64,\n  runtime: lambda.Runtime.NODEJS_16_X,\n  bundling: {\n    minify: false,\n    target: 'node16',\n    externalModules: layer.packagedDependencies // don't bundle layer dependencies in lambda\n  },\n  layers: [layer.layerVersion] // use lambda layer\n};\n\nconst apimdaApp = new ApimdaApp(this, 'ApimdaApp', {\n  lambdaGenerationStrategy: LambdaGenerationStrategy.PER_CONTROLLER,\n  tsConfigPath: require.resolve('../tsconfig.json'),\n  lambdaProps\n});\n")))}d.isMDXComponent=!0}}]);