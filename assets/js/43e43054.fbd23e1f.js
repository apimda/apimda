"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[799],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=s(n),c=a,h=m["".concat(p,".").concat(c)]||m[c]||u[c]||l;return n?r.createElement(h,o(o({ref:t},d),{},{components:n})):r.createElement(h,o({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=c;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[m]="string"==typeof e?e:a,o[1]=i;for(var s=2;s<l;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1810:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const l={sidebar_position:1},o="Routes",i={unversionedId:"controllers/routes",id:"controllers/routes",title:"Routes",description:"Routing in apimda mirrors that of AWS API Gateway, in that there are two elements of the HTTP request that determine a route:",source:"@site/docs/controllers/routes.md",sourceDirName:"controllers",slug:"/controllers/routes",permalink:"/docs/controllers/routes",draft:!1,editUrl:"https://github.com/joemays/apimda/tree/main/docs/docs/controllers/routes.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Controllers",permalink:"/docs/controllers/"},next:{title:"Requests",permalink:"/docs/controllers/requests"}},p={},s=[{value:"HTTP Methods",id:"http-methods",level:2},{value:"Path matching",id:"path-matching",level:2}],d={toc:s};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"routes"},"Routes"),(0,a.kt)("p",null,"Routing in apimda mirrors that of AWS ",(0,a.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-routes.html"},"API Gateway"),", in that there are two elements of the HTTP request that determine a route:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"HTTP method, e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"GET")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"POST"),"."),(0,a.kt)("li",{parentName:"ol"},"Request path, e.g. in ",(0,a.kt)("inlineCode",{parentName:"li"},"http://example.com/users/12")," the path would be ",(0,a.kt)("inlineCode",{parentName:"li"},"/users/{userId}"),".")),(0,a.kt)("h2",{id:"http-methods"},"HTTP Methods"),(0,a.kt)("p",null,"Apimda currently supports five HTTP methods. They are only valid on instance methods of a ",(0,a.kt)("inlineCode",{parentName:"p"},"@Controller")," class:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"HTTP Method"),(0,a.kt)("th",{parentName:"tr",align:null},"Decorator"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"GET")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Get()"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"POST")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Post()"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"PUT")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Put()"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"PATCH")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Patch()"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"DELETE")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Delete()"))))),(0,a.kt)("p",null,"Note that instance methods ",(0,a.kt)("em",{parentName:"p"},"must be")," marked as ",(0,a.kt)("inlineCode",{parentName:"p"},"async")," and return ",(0,a.kt)("inlineCode",{parentName:"p"},"Promise"),"s."),(0,a.kt)("h2",{id:"path-matching"},"Path matching"),(0,a.kt)("p",null,"Paths are matched using the same syntax as that of AWS ",(0,a.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-routes.html"},"API Gateway"),"."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Path parameters are denoted using curly braces, e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"/pets/dog/{id}")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"{proxy+}")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"$default")," are not currently supported by apimda.")),(0,a.kt)("p",null,"A controller ",(0,a.kt)("em",{parentName:"p"},"may")," declare a base path. All routes will then be relative to that path. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"@Controller('/pets')\nclass PetController {\n  @Get()\n  async getAllPets(): Promise<Pet[]> {\n    // return all pets\n  }\n\n  @Get('/{petId}')\n  async getById(@Path() petId: UUID): Promise<Pet> {\n    // return pet or 404...\n  }\n\n  @Delete('/{petId}')\n  async deleteById(@Path() petId: UUID): Promise<void> {\n    // delete pet or 404...\n  }\n}\n")),(0,a.kt)("p",null,"... ",(0,a.kt)("inlineCode",{parentName:"p"},"GET /pets")," will return all pets and ",(0,a.kt)("inlineCode",{parentName:"p"},"GET /pets/12")," would return the pet with pet ID of 12. Likewise ",(0,a.kt)("inlineCode",{parentName:"p"},"DELETE /pets/24")," would delete the pet with ID of 24."),(0,a.kt)("p",null,"Some restrictions on paths:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"All paths in your code ",(0,a.kt)("em",{parentName:"li"},"must")," be unique; apimda will generate an error if you attempt to deploy controllers with duplicate paths (e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"/pets/{id}")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"/pets/{petId}"),")."),(0,a.kt)("li",{parentName:"ol"},"Paths must ",(0,a.kt)("em",{parentName:"li"},"start with")," but ",(0,a.kt)("em",{parentName:"li"},"not end with")," a forward slash ",(0,a.kt)("inlineCode",{parentName:"li"},"/"),".")))}m.isMDXComponent=!0}}]);