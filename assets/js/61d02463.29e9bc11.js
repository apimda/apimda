"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[358],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),u=i,f=m["".concat(s,".").concat(u)]||m[u]||d[u]||o;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:i,a[1]=l;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6599:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),i=(n(7294),n(3905));const o={sidebar_position:4},a="Initialization",l={unversionedId:"controllers/initialization",id:"controllers/initialization",title:"Initialization",description:"Controllers often have dependencies on other services, such as a database (Dynamo) or file store (S3). It's not a good",source:"@site/docs/controllers/initialization.md",sourceDirName:"controllers",slug:"/controllers/initialization",permalink:"/apimda/docs/controllers/initialization",draft:!1,editUrl:"https://github.com/apimda/apimda/tree/main/docs/docs/controllers/initialization.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Responses",permalink:"/apimda/docs/controllers/responses"},next:{title:"Deployment",permalink:"/apimda/docs/deployment/"}},s={},p=[{value:"@Env",id:"env",level:2},{value:"@Init",id:"init",level:2}],c={toc:p};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"initialization"},"Initialization"),(0,i.kt)("p",null,"Controllers often have dependencies on other services, such as a database (Dynamo) or file store (S3). It's not a good\nidea to hard code locations of these services directly into your code - instead, they should\nbe ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Dependency_injection"},"injected"),"\nor ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Service_discovery"},"discovered"),"."),(0,i.kt)("p",null,"Apimda provides two decorators to help with specific use cases: ",(0,i.kt)("inlineCode",{parentName:"p"},"@Env")," for injecting information such as table or bucket names from a lambda runtime's environment and ",(0,i.kt)("inlineCode",{parentName:"p"},"@Init")," to perform asynchronous initialization."),(0,i.kt)("h2",{id:"env"},"@Env"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"@Env")," injects string values from a lambda runtime's environment into a controller's constructor. For example, to inject\nthe value of ",(0,i.kt)("inlineCode",{parentName:"p"},"DYNAMO_USER_TABLE")," into a private ",(0,i.kt)("inlineCode",{parentName:"p"},"tableName")," property:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"@Controller()\nclass MyController {\n  constructor(@Env('DYNAMO_USER_TABLE') private tableName: string) {}\n}\n")),(0,i.kt)("p",null,"This has two advantages over using ",(0,i.kt)("inlineCode",{parentName:"p"},"process.env.DYNAMO_USER_TABLE")," directly in code:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"apimda will verify that ",(0,i.kt)("inlineCode",{parentName:"li"},"DYNAMO_USER_TABLE")," is present in the lambda environment at deploy time, eliminating typo\nerrors"),(0,i.kt)("li",{parentName:"ol"},"apimda will provide only the environment variables a controller requires, adhering to\nthe ",(0,i.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Principle_of_least_privilege"},"principle of least privilege"))),(0,i.kt)("p",null,"Note restrictions on use of ",(0,i.kt)("inlineCode",{parentName:"p"},"@Env"),":"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"It can only be used in constructor arguments."),(0,i.kt)("li",{parentName:"ol"},"Arguments must be of type ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),".")),(0,i.kt)("h2",{id:"init"},"@Init"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"@Init")," allows asynchronous initialization of your controller class. This is often required to retrieve configuration\ninformation from AWS services, e.g. ",(0,i.kt)("a",{parentName:"p",href:"https://aws.amazon.com/secrets-manager/"},"SecretsManager")," or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"@Controller()\nclass MyController {\n  @Init()\n  async init() {\n    // look up something in an external service, e.g. AWS SecretsManager\n  }\n}\n")),(0,i.kt)("p",null,"Note that the method you decorate with ",(0,i.kt)("inlineCode",{parentName:"p"},"@Init")," must be:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The method must be ",(0,i.kt)("inlineCode",{parentName:"li"},"async"),"."),(0,i.kt)("li",{parentName:"ol"},"The method must be an instance method (not a ",(0,i.kt)("inlineCode",{parentName:"li"},"static")," method)."),(0,i.kt)("li",{parentName:"ol"},"The method must be not take any arguments (i.e. it must be parameter-less).")))}m.isMDXComponent=!0}}]);