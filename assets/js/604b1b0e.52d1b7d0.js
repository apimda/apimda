"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[308],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),c=s(n),u=r,f=c["".concat(l,".").concat(u)]||c[u]||m[u]||o;return n?a.createElement(f,i(i({ref:t},d),{},{components:n})):a.createElement(f,i({ref:t},d))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[c]="string"==typeof e?e:r,i[1]=p;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4819:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:1},i="ApimdaApp",p={unversionedId:"deployment/construct",id:"deployment/construct",title:"ApimdaApp",description:"Apimda provides an ApimdaApp CDK Construct that generates lambda functions for your controllers.",source:"@site/docs/deployment/construct.md",sourceDirName:"deployment",slug:"/deployment/construct",permalink:"/apimda/docs/deployment/construct",draft:!1,editUrl:"https://github.com/joemays/apimda/tree/main/docs/docs/deployment/construct.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Deployment",permalink:"/apimda/docs/deployment/"},next:{title:"NpmLayerVersion",permalink:"/apimda/docs/deployment/layers"}},l={},s=[{value:"Creating an ApimdaApp",id:"creating-an-apimdaapp",level:2},{value:"Adding Routes to API Gateway",id:"adding-routes-to-api-gateway",level:2}],d={toc:s};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"apimdaapp"},"ApimdaApp"),(0,r.kt)("p",null,"Apimda provides an ",(0,r.kt)("inlineCode",{parentName:"p"},"ApimdaApp")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/cdk/v2/guide/constructs.html"},"CDK Construct")," that generates lambda functions for your controllers."),(0,r.kt)("h2",{id:"creating-an-apimdaapp"},"Creating an ApimdaApp"),(0,r.kt)("p",null,"Following CDK conventions, you create an ",(0,r.kt)("inlineCode",{parentName:"p"},"ApimdaApp")," construct by passing in properties, ",(0,r.kt)("inlineCode",{parentName:"p"},"ApimdaAppProps"),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"tsConfigPath"),": path to your project's ",(0,r.kt)("inlineCode",{parentName:"li"},"tsconfig.json")," typescript configuration file"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"lambdaGenerationStrategy"),": generate one lambda per controller or per route"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"lambdaProps"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"NodejsFunctionProps")," properties to use to create lambda functions")),(0,r.kt)("p",null,"For example, the following code creates an ApimdaApp that generates one function per controller, and configures lambda architecture, NodeJS runtime, and log retention:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const lambdaProps: NodejsFunctionProps = {\n  architecture: lambda.Architecture.ARM_64,\n  runtime: lambda.Runtime.NODEJS_16_X,\n  logRetention: cdkLogs.RetentionDays.ONE_DAY\n};\n\nconst apimdaApp = new ApimdaApp(this, 'ApimdaApp', {\n  lambdaGenerationStrategy: LambdaGenerationStrategy.PER_CONTROLLER,\n  tsConfigPath: require.resolve('../tsconfig.json'),\n  lambdaProps\n});\n")),(0,r.kt)("h2",{id:"adding-routes-to-api-gateway"},"Adding Routes to API Gateway"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ApimdaApp")," construct provides readonly access to an array of ",(0,r.kt)("inlineCode",{parentName:"p"},"ApimdaRoute"),"s to be wired into an API Gateway. Each route contains the following information:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"handlerName"),": Name of the handler function in the lambda"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"method"),": HTTP method for the route, e.g. GET, POST, ..."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"path"),": Path for the route, e.g. /users/{userId}"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"lambda"),": The ",(0,r.kt)("inlineCode",{parentName:"li"},"NodejsFunction")," lambda that handles requests"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"requiresAuthorizer"),": Whether the route requires an authorizer, i.e. if an ",(0,r.kt)("inlineCode",{parentName:"li"},"@Auth")," decorator is applied"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"scopes"),": OAuth2 security scopes, if provided in the ",(0,r.kt)("inlineCode",{parentName:"li"},"@Auth")," decorator, for this route")),(0,r.kt)("p",null,"Here's an example of how to add routes to an API Gateway V2 ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/cdk/api/v2/docs/@aws-cdk_aws-apigatewayv2-alpha.HttpApi.html"},"HttpApi"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const authorizer = createAuthorizer(); // an APIGW authorizer, e.g. HttpUserPoolAuthorizer\nconst api = new HttpApi(this, 'Api', {}); // APIGW v2 construct\nfor (const route of apimdaApp.routes) {\n  const integration = new HttpLambdaIntegration(`${route.handlerName}Integration`, route.lambda);\n  api.addRoutes({\n    path: route.path,\n    methods: [route.method as apigw.HttpMethod],\n    integration: integration,\n    authorizer: route.requiresAuthorizer ? authorizer : undefined\n  });\n}\n")))}c.isMDXComponent=!0}}]);