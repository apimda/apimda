"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[623],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(n),m=o,f=c["".concat(l,".").concat(m)]||c[m]||d[m]||s;return n?r.createElement(f,a(a({ref:t},u),{},{components:n})):r.createElement(f,a({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:o,a[1]=i;for(var p=2;p<s;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1757:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const s={sidebar_position:3},a="Responses",i={unversionedId:"controllers/responses",id:"controllers/responses",title:"Responses",description:"Successful Responses and Serialization",source:"@site/docs/controllers/responses.md",sourceDirName:"controllers",slug:"/controllers/responses",permalink:"/docs/controllers/responses",draft:!1,editUrl:"https://github.com/joemays/apimda/tree/main/docs/docs/controllers/responses.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Requests",permalink:"/docs/controllers/requests"},next:{title:"Initialization",permalink:"/docs/controllers/initialization"}},l={},p=[{value:"Successful Responses and Serialization",id:"successful-responses-and-serialization",level:2},{value:"Errors",id:"errors",level:2},{value:"Custom Responses",id:"custom-responses",level:2}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"responses"},"Responses"),(0,o.kt)("h2",{id:"successful-responses-and-serialization"},"Successful Responses and Serialization"),(0,o.kt)("p",null,"Apimda returns results from typescript to directly to API Gateway, which sets the ",(0,o.kt)("inlineCode",{parentName:"p"},"Content-Type")," header\nto ",(0,o.kt)("inlineCode",{parentName:"p"},"application/json"),". This is the desired behavior for the vast majority of REST responses."),(0,o.kt)("p",null,"However, there are cases where an API needs to return other MIME types. To do this, return either a ",(0,o.kt)("inlineCode",{parentName:"p"},"string")," for text\ndata or ",(0,o.kt)("inlineCode",{parentName:"p"},"Buffer")," for binary data, and use the ",(0,o.kt)("inlineCode",{parentName:"p"},"@Provides")," decorator to indicate the type. For example, to return a PNG\nimage:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"@Controller()\nclass SampleController {\n  @Get('/images/{imageId}')\n  @Provides('image/png')\n  async getImage(@Path() imageId: string): Promise<Buffer> {\n    const buffer = loadImage(imageId); // load image into buffer, e.g. from S3\n    return buffer;\n  }\n}\n")),(0,o.kt)("p",null,"Note that apimda automatically encodes binary data as a base 64 encoded string, setting the ",(0,o.kt)("inlineCode",{parentName:"p"},"isBase64Encoded")," flag\nappropriately, when sending the response to API Gateway."),(0,o.kt)("p",null,"Likewise, to return a custom XML response:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"@Controller()\nclass SampleController {\n  @Get('/docs/{docId}')\n  @Provides('application/xml')\n  async getDoc(@Path() docId: string): Promise<string> {\n    const xmlAsString = loadDoc(imageId); // load XML as string, e.g. from S3\n    return xmlAsString;\n  }\n}\n")),(0,o.kt)("h2",{id:"errors"},"Errors"),(0,o.kt)("p",null,"Apimda will ",(0,o.kt)("a",{parentName:"p",href:"/docs/controllers/requests#custom-type-validations"},"automatically validate custom input types"),", returning an ",(0,o.kt)("inlineCode",{parentName:"p"},"400")," HTTP\nerror code if the request not well formed."),(0,o.kt)("p",null,"You can instruct apimda to return specific HTTP error status codes by throwing an instance of the ",(0,o.kt)("inlineCode",{parentName:"p"},"HttpError")," class. For\nexample, the code below returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"404")," response when a resource cannot be found:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"@Controller('/user')\nclass UserController {\n  @Get('/{userId}')\n  async getUser(@Query() userId: string): Promise<User> {\n    const result = findUserById(userId);\n    if (!result) {\n      throw new HttpError(404);\n    }\n    return user;\n  }\n}\n")),(0,o.kt)("p",null,"You can also provide custom status codes, for both successful and error responses,\nby ",(0,o.kt)("a",{parentName:"p",href:"#custom-responses"},"returning a custom response"),"."),(0,o.kt)("p",null,":::warn Throwing HttpError\nApimda does not currently reliably detect ",(0,o.kt)("inlineCode",{parentName:"p"},"HttpError"),"s that are ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"not"))," constructed in the ",(0,o.kt)("inlineCode",{parentName:"p"},"throws")," statement."),(0,o.kt)("p",null,"For example, apimda will not know that this method can return a ",(0,o.kt)("inlineCode",{parentName:"p"},"404"),", because the error is constructed in\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"notFoundErr")," function, and not inline with the ",(0,o.kt)("inlineCode",{parentName:"p"},"throws")," statement:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"@Controller()\nclass SampleController {\n  @Get('/{userId}')\n  async getUser(@Query() userId: string): Promise<User> {\n    const notFoundErr = (message?: string) => {\n      return new HttpError(404, message);\n    };\n    const result = findUserById(userId);\n    if (!result) {\n      throw notFoundErr();\n    }\n    return user;\n  }\n}\n")),(0,o.kt)("p",null,"While there is no impact of this at runtime (apimda will catch every HttpError and return the appropriate error code in\nthe response), it means that the ",(0,o.kt)("inlineCode",{parentName:"p"},"404")," error code will not show up in ",(0,o.kt)("a",{parentName:"p",href:"/docs/openapi"},"OpenAPI documentation")," and may\ncause issues in future versions."),(0,o.kt)("p",null,":::"),(0,o.kt)("h2",{id:"custom-responses"},"Custom Responses"),(0,o.kt)("p",null,"Fully custom responses may be provided by simply returning the ",(0,o.kt)("inlineCode",{parentName:"p"},"ApimdaResult<T>")," type. It enables full OpenAPI response\ndocumentation, as well as more sophisticated response handling, including proper encoding of ",(0,o.kt)("inlineCode",{parentName:"p"},"Buffer")," return types."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"@Controller()\nclass SampleController {\n  @Get('/users/{userId}')\n  async apimdaResult(@Path() userId: UUID): Promise<ApimdaResult<User>> {\n    const user = findUserById(userId);\n    return { statusCode: 201, result: user }; // return anything allowed by API Gateway except \"body\"\n  }\n}\n")),(0,o.kt)("p",null,":::warn Returning API Gateway V2 Result"),(0,o.kt)("p",null,"Note that while controller methods may ",(0,o.kt)("em",{parentName:"p"},"currently")," return ",(0,o.kt)("inlineCode",{parentName:"p"},"APIGatewayProxyStructuredResultV2"),", it is highly discouraged.\nIt provides no benefit over ",(0,o.kt)("inlineCode",{parentName:"p"},"ApimdaResult<T>"),", disables proper Open API documentation of responses, forces manual\nbinary encoding, and couples controllers to API Gateway types."),(0,o.kt)("p",null,"Future versions of apimda may support environments outside of API Gateway V2, and support may be dropped in a future\nversion."),(0,o.kt)("p",null,":::"))}c.isMDXComponent=!0}}]);