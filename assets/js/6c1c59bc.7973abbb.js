"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[229],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>y});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),s=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=s(e.components);return a.createElement(l.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),c=s(t),u=r,y=c["".concat(l,".").concat(u)]||c[u]||m[u]||o;return t?a.createElement(y,i(i({ref:n},d),{},{components:t})):a.createElement(y,i({ref:n},d))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p[c]="string"==typeof e?e:r,i[1]=p;for(var s=2;s<o;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6475:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var a=t(7462),r=(t(7294),t(3905));const o={sidebar_position:2},i="NpmLayerVersion",p={unversionedId:"deployment/layers",id:"deployment/layers",title:"NpmLayerVersion",description:"Apimda has a NpmLayerVersion construct to create a custom lambda layer from an NPM package.json file. This is useful for packaging your project's dependencies into a layer to speed up deployment and lower cold start times.",source:"@site/docs/deployment/layers.md",sourceDirName:"deployment",slug:"/deployment/layers",permalink:"/apimda/docs/deployment/layers",draft:!1,editUrl:"https://github.com/apimda/apimda/tree/main/docs/docs/deployment/layers.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"ApimdaApp",permalink:"/apimda/docs/deployment/construct"},next:{title:"Open API",permalink:"/apimda/docs/openapi"}},l={},s=[{value:"Directory Structure",id:"directory-structure",level:2},{value:"Creating NpmLayerVersion",id:"creating-npmlayerversion",level:2},{value:"Using NpmLayerVersion",id:"using-npmlayerversion",level:2}],d={toc:s};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"npmlayerversion"},"NpmLayerVersion"),(0,r.kt)("p",null,"Apimda has a ",(0,r.kt)("inlineCode",{parentName:"p"},"NpmLayerVersion")," construct to create a custom ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html"},"lambda layer")," from an NPM package.json file. This is useful for packaging your project's dependencies into a layer to speed up deployment and lower cold start times."),(0,r.kt)("p",null,"Simply list the packages you'd like to be included in ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json"),", and apimda will make sure they're up-to-date (i.e. ",(0,r.kt)("inlineCode",{parentName:"p"},"npm install"),") before every deployment, and then generate the layer itself as a CDK ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_lambda.LayerVersion.html"},"LayerVersion"),"."),(0,r.kt)("h2",{id:"directory-structure"},"Directory Structure"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"NpmLayerVersion")," requires the following directory structure, as specified by ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html#configuration-layers-path"},"AWS Lambda layer path configuration")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<root>\n|- <custom code>\n|- nodejs\n   |- package.json\n   |- package-lock.json\n")),(0,r.kt)("h2",{id:"creating-npmlayerversion"},"Creating NpmLayerVersion"),(0,r.kt)("p",null,"You can create an ",(0,r.kt)("inlineCode",{parentName:"p"},"NpmLayerVersion")," with the following ",(0,r.kt)("inlineCode",{parentName:"p"},"NpmLayerVersionProps"),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Path to the directory structure of the layer, relative to your ",(0,r.kt)("inlineCode",{parentName:"li"},"tsconfig.json")),(0,r.kt)("li",{parentName:"ol"},"Custom ",(0,r.kt)("a",{parentName:"li",href:"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_lambda.LayerVersionProps.html"},"LayerVersionProps")," to pass to the underlying CDK ",(0,r.kt)("inlineCode",{parentName:"li"},"LayerVersion")," construct:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const layer = new NpmLayerVersion(this, 'DependencyLayer', {\n  layerPath: 'src/deploy/layer',\n  layerVersionProps: {\n    removalPolicy: UserApiStack.removalPolicy,\n    compatibleArchitectures: [lambda.Architecture.X86_64, lambda.Architecture.ARM_64],\n    compatibleRuntimes: [lambda.Runtime.NODEJS_16_X]\n  }\n});\n")),(0,r.kt)("h2",{id:"using-npmlayerversion"},"Using NpmLayerVersion"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"NpmLayerVersion")," provides two properties to be used when creating ",(0,r.kt)("inlineCode",{parentName:"p"},"NodejsFunction"),"s:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"layerVersion"),": the underlying CDK ",(0,r.kt)("inlineCode",{parentName:"li"},"LayerVersion")," representing the lambda layer itself"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"packagedDependencies"),": list of dependencies that were packaged.")),(0,r.kt)("p",null,"The example below shows how to use this with ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_lambda_nodejs.NodejsFunctionProps.html"},"NodejsFunctionProps")," to create an ",(0,r.kt)("a",{parentName:"p",href:"/apimda/docs/deployment/construct"},"ApimdaApp")," construct:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const lambdaProps: NodejsFunctionProps = {\n  architecture: lambda.Architecture.ARM_64,\n  runtime: lambda.Runtime.NODEJS_16_X,\n  bundling: {\n    minify: false,\n    target: 'node16',\n    externalModules: layer.packagedDependencies // don't bundle layer dependencies in lambda\n  },\n  layers: [layer.layerVersion] // use lambda layer\n};\n\nconst apimdaApp = new ApimdaApp(this, 'ApimdaApp', {\n  lambdaGenerationStrategy: LambdaGenerationStrategy.PER_CONTROLLER,\n  tsConfigPath: require.resolve('../tsconfig.json'),\n  lambdaProps\n});\n")),(0,r.kt)("admonition",{title:"Packaging Apimda's Runtime",type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"Currently ",(0,r.kt)("inlineCode",{parentName:"p"},"NpmLayerVersion.packagedDependencies")," only reports dependencies that are explicitly declared in the layer's ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json"),"."),(0,r.kt)("p",{parentName:"admonition"},"As such, if you want to package all of apimda's runtime dependencies, you need to declare both ",(0,r.kt)("inlineCode",{parentName:"p"},"@apimda/runtime")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"@apimda/runtime-lambda")," in your layer's ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json"),":"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "@my-project/base-layer",\n  "version": "1.0.0",\n  "dependencies": {\n    "@apimda/runtime-lambda": "0.1.0",\n    "@apimda/runtime": "0.1.0"\n  }\n}\n')),(0,r.kt)("p",{parentName:"admonition"},"If you only declare ",(0,r.kt)("inlineCode",{parentName:"p"},"@apimda/runtime-lambda"),", the generated ",(0,r.kt)("inlineCode",{parentName:"p"},"NodeJsFunction"),"s will use esbuild to inline apimda's entire runtime including all of its dependencies - even large ones like ",(0,r.kt)("a",{parentName:"p",href:"https://ajv.js.org"},"AJV")," - directly in your lambda code. This will also cause issues with error handling, as apimda currently uses ",(0,r.kt)("inlineCode",{parentName:"p"},"instanceof HttpError")," to distinguish between expected statuses (e.g. 400, 404, etc.) and unexpected errors (i.e. 500).")))}c.isMDXComponent=!0}}]);